{"name":"Silex-jira-oauth-provider","tagline":"The Silex JIRA OAuth Provider provides a simple mechanism to enable your applicaton to use the Atlassian JIRA REST API without the need of password transmission.","body":"Silex JIRA OAuth Provider\r\n=========================\r\n\r\nThe Silex JIRA OAuth Provider provides a simple mechanism to enable your\r\napplicaton to use the [Atlassian JIRA REST API]\r\n(https://developer.atlassian.com/display/JIRADEV/JIRA+REST+APIs) without the\r\nneed of password transmission. Instead of using basic authentication an access\r\ntoken is created using JIRAs OAuth interface. This token can then be used with a\r\n[Guzzle HTTP Client](http://guzzle.readthedocs.org/en/latest/) to retrieve,\r\nmodify and create issues in JIRA.\r\n\r\nPrerequisites\r\n-------------\r\n\r\nIn order for the provider to work, you need the following\r\n\r\n* A running [Atlassian JIRA](https://www.atlassian.com/software/jira) server.\r\n* An application link for a generic application with an incoming\r\nauthorization configured (see the [documentation]\r\n(https://confluence.atlassian.com/display/JIRA/Linking+to+Another+Application)\r\nfor more details).\r\n\r\nInstallation\r\n------------\r\n\r\nYou can install the silex jira oauth provider through\r\n[Composer](https://getcomposer.org/)\r\n\r\n\tcomposer require bmwcarit/silex-jira-oauth-provider \"dev-master\"\r\n\r\nUsage\r\n-----\r\n\r\nBefore you can use the provider you need to configure and register it with your\r\nsilex application. The following code shows the most common configuration\r\noptions that are necessary:\r\n\r\n\t$app->register(new JiraOAuthServiceProvider(array(\r\n\t\t'base_url' => 'https://www.yourcorp.com/jira/',\r\n\t\t'private_key' => __DIR__ . '/jira.pem',\r\n\t\t'consumer_key' => 'yoursecretkey',\r\n\t)));\r\n\r\nOnce the provider is registered your application will have a new controller\r\nmounted at `/jira`. To start the authentication process simple open the route\r\nwith the name `jira-connect`. Either you redirect within your code\r\n\r\n\t$app->redirect($app['url_generator']->generate('jira-connect'));\r\n\r\nor you add link to your twig templates.\r\n\r\n\t<a href=\"{{ path('jira-connect') }}\">Click here to authenticate with Jira</a>\r\n\r\nOnce the authentication is successful the provider will redirect to the route\r\nwith the name `home` or, if it does not exist, to `/` of your silex application.\r\n\r\nYou can alter this behavior by adding a redirect parameter containing the name\r\nof a route or an URL, to which the provider should redirect after successful\r\nauthentication. For example:\r\n\r\n\t$app->redirect($app['url_generator']->generate('jira-connect',\r\n\t\t\t\t\t\t\t\t\t\t\tarray('redirect' => 'yourroute')));\r\n\r\nOr in your twig template:\r\n\r\n\t<a href=\"{{ path('jira-connect', {redirect: 'yourroute'}) }}\">\r\n\t\tClick here to authenticate with Jira</a>\r\n\r\nAfter successful authentication you can use the [Atlassian JIRA REST API]\r\n(https://developer.atlassian.com/display/JIRADEV/JIRA+REST+APIs) with the\r\navailable [Guzzle HTTP Client](http://guzzle.readthedocs.org/en/latest/).\r\nFor example:\r\n\r\n\t$app['jira.oauth.client']->get('rest/api/2/priority');\r\n\r\nConfiguration Options\r\n---------------------\r\n\r\n* **base_url:**\r\nThe base URL of your Atlassian JIRA server.\r\n(*default*: `http://localhost:8181/`)\r\n* **oauth_base_url:**\r\nThe path to the oauth plugin. Atlassian JIRA serves the OAuth APIs here by\r\ndefault.\r\n(*default*: `plugins/servlet/oauth/`)\r\n* **private_key:**\r\nThe path to the private key file that authenticate your application with\r\nAtlassian JIRA.\r\n(*default*: `''`)\r\n* **consumer_key:**\r\nA string containing the consumer key that is used to authenticate your\r\napplication with Atlassian JIRA.\r\n(*default*: `''`)\r\n* **url_prefix.request_token:**\r\nThe URL prefix to construct the URL to request a new token. This is constructed\r\nwith the `base_url` and the `oauth_base_url`. The default of this option already\r\nmatches JIRAs default.\r\n(*default*: `request-token`)\r\n* **url_prefix.authorization:**\r\nThe URL prefix to construct the URL to authorize a token. This is constructed\r\nwith the `base_url` and the `oauth_base_url`. The default of this option already\r\nmatches JIRAs default.\r\n(*default*: `authorize?oauth_token=%s`)\r\n* **url_prefix.access_token:**\r\nThe URL prefix to construct the URL to request an access token. This is\r\nconstructed with the `base_url` and the `oauth_base_url`. The default of this\r\noption already matches JIRAs default.\r\n(*default*: `access-token`)\r\n* **route_name.callback:**\r\nThe name of the route which handles the callback from Atlassian JIRA. The\r\ncallback is transmitted to JIRA and once the user allows the application to\r\naccess JIRA he will be redirected to this URL.\r\n(*default*: `jira-callback`)\r\n* **route_name.default_redirect:**\r\nThe name of the route to redirect the user upon successful authentication. This\r\nroute is only used if you do not set the redirect parameters on the\r\n`jira-connect` route.\r\n(*default*: `home`)\r\n* **automount:**\r\nIf this is set to true the provider will automatically mount the `jira-connect`\r\nand `jira-callback` routes under `/jira`. If you set this to false make sure you\r\nmount the controller yourself. To do this simply call\r\n`$app->mount('/yourpath', $app['jira.controller.provider']);`\r\n(*default*: `true`)\r\n\r\nLicense\r\n-------\r\n\r\nThe silex-jira-oauth-provider is licensed under the MIT license.\r\n\r\nAcknowledgment\r\n--------------\r\n\r\nThe initial work is based on the [JIRA OAuth PHP examples]\r\n(https://bitbucket.org/atlassian_tutorial/atlassian-oauth-examples/src/d625161454d1ca97b4515c6147b093fac9a68f7e/php/LICENSE?at=default)\r\nby Stan Lemon\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}